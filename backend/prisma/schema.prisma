// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  questionVotes QuestionVote[]
  answerVotes   AnswerVote[]
}

model Question {
  id        String         @id @default(uuid())
  title     String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  answers   Answer[]
  comments  Comment[]
  tags      Tag[]
  votes     QuestionVote[]
}

model Answer {
  id         String       @id @default(uuid())
  content    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  question   Question     @relation(fields: [questionId], references: [id])
  questionId String
  comments   Comment[]
  votes      AnswerVote[]
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

model QuestionVote {
  id         String   @id @default(uuid())
  value      Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  @@unique([userId, questionId])
}

model AnswerVote {
  id         String   @id @default(uuid())
  value      Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  answer     Answer   @relation(fields: [answerId], references: [id])
  answerId   String

  @@unique([userId, answerId])
}
